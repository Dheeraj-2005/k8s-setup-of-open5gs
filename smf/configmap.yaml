apiVersion: v1
kind: ConfigMap
metadata:
  name: smf-config
  namespace: open5gs
data:
  MCC: "001"
  MNC: "01"
  MAX_NUM_UE: "1024"
  TAC: "1"
  PCSCF_IP: "172.22.0.21"
  PCSCF_BIND_PORT: "3871"
  UE_IPV4_INTERNET: "192.168.100.0/24"
  UE_IPV4_IMS: "192.168.101.0/24"
  SMF_DNS1: "8.8.8.8"
  SMF_DNS2: "8.8.4.4"



  smf.yaml: |
    logger:
      file:
        path: /open5gs/install/var/log/open5gs/smf.log
    sbi:
      server:
        no_tls: true
      client:
        no_tls: true  
    global:
      max:
        ue: MAX_NUM_UE  
      parameter:
        no_ipv4v6_local_addr_in_packet_filter: true
    smf:
      freeDiameter: /open5gs/install/etc/freeDiameter/smf.conf
      sbi:
        server:
          - address: 0.0.0.0
            port: 7777
        client:
          nrf:
            - uri: http://open5gs-nrf:7777
          scp:
            - uri: http://open5gs-scp:7777
      gtpc:
        server:
          - address: 0.0.0.0
      gtpu:
        server:
          - address: 0.0.0.0
      pfcp:
        server:
          - address: 0.0.0.0  
        client:
          upf:
            - address : 0.0.0.0
      session:
        - subnet: UE_IPV4_INTERNET_APN_SUBNET
          gateway: UE_IPV4_INTERNET_APN_GATEWAY_IP
          dnn: internet
        - subnet: 2001:230:cafe::/48
          gateway: 2001:230:cafe::1
          dnn: internet
        - subnet: UE_IPV4_IMS_SUBNET
          gateway: UE_IPV4_IMS_TUN_IP
          dnn: ims
        - subnet: 2001:230:babe::/48
          gateway: 2001:230:babe::1
          dnn: ims
      dns:
        - SMF_DNS1
        - SMF_DNS2
        - 2001:4860:4860::8888
        - 2001:4860:4860::8844
      # p-cscf:
      #   - PCSCF_IP
      mtu: 1450
      metrics:
        server:
          - address: 0.0.0.0
            port: 9091
  ip_utils.py: |

    import click
    import sys
    import ipaddress

    def validate_ip_net(ctx, param, value):
        try:
            ip_net = ipaddress.ip_network(value)
            return ip_net
        except ValueError:
            raise click.BadParameter(
                'Value does not represent a valid IPv4/IPv6 range')


    @click.command()
    @click.option('--ip_range',
                  required=True,
                  callback=validate_ip_net,
                  help='UE IPv4/IPv6 Address range in CIDR format e.g. 192.168.100.0/24 or 2001:230:cafe::/48')
    def start(ip_range):

        # Get the first IP address in the IP range and netmask prefix length
        first_ip_addr = next(ip_range.hosts(), None)
        if not first_ip_addr:
            raise ValueError('Invalid UE IPv4 range. Only one IP given')
        else:
            first_ip_addr = first_ip_addr.exploded
            print(str(first_ip_addr))

    if __name__ == '__main__':
        try:
            start()
            sys.exit(0)
        except ValueError:
            sys.exit(1)


  
  make_certs.sh: |
    #!/bin/sh

    if [ 1 -ne $# ]
    then
        echo You must specify output directory : ./make_certs.sh ./freeDiameter

        exit;
    fi

    rm -rf demoCA
    mkdir demoCA
    echo 01 > demoCA/serial
    touch demoCA/index.txt.attr
    touch demoCA/index.txt

    # Generate .rnd if it does not exist
    openssl rand -out /root/.rnd -hex 256

    # CA self certificate
    openssl req  -new -batch -x509 -days 3650 -nodes -newkey rsa:1024 -out $1/cacert.pem -keyout cakey.pem -subj /CN=ca.EPC_DOMAIN/C=KO/ST=Seoul/L=Nowon/O=Open5GS/OU=Tests

    #mme
    openssl genrsa -out $1/mme.key.pem 1024
    openssl req -new -batch -out mme.csr.pem -key $1/mme.key.pem -subj /CN=mme.EPC_DOMAIN/C=KO/ST=Seoul/L=Nowon/O=Open5GS/OU=Tests
    openssl ca -cert $1/cacert.pem -days 3650 -keyfile cakey.pem -in mme.csr.pem -out $1/mme.cert.pem -outdir . -batch

    #hss
    openssl genrsa -out $1/hss.key.pem 1024
    openssl req -new -batch -out hss.csr.pem -key $1/hss.key.pem -subj /CN=hss.EPC_DOMAIN/C=KO/ST=Seoul/L=Nowon/O=Open5GS/OU=Tests
    openssl ca -cert $1/cacert.pem -days 3650 -keyfile cakey.pem -in hss.csr.pem -out $1/hss.cert.pem -outdir . -batch

    #smf
    openssl genrsa -out $1/smf.key.pem 1024
    openssl req -new -batch -out smf.csr.pem -key $1/smf.key.pem -subj /CN=smf.EPC_DOMAIN/C=KO/ST=Seoul/L=Nowon/O=Open5GS/OU=Tests
    openssl ca -cert $1/cacert.pem -days 3650 -keyfile cakey.pem -in smf.csr.pem -out $1/smf.cert.pem -outdir . -batch

    #pcrf
    openssl genrsa -out $1/pcrf.key.pem 1024
    openssl req -new -batch -out pcrf.csr.pem -key $1/pcrf.key.pem -subj /CN=pcrf.EPC_DOMAIN/C=KO/ST=Seoul/L=Nowon/O=Open5GS/OU=Tests
    openssl ca -cert $1/cacert.pem -days 3650 -keyfile cakey.pem -in pcrf.csr.pem -out $1/pcrf.cert.pem -outdir . -batch

    rm -rf demoCA
    rm -f 01.pem 02.pem 03.pem 04.pem
    rm -f cakey.pem
    rm -f mme.csr.pem hss.csr.pem smf.csr.pem pcrf.csr.pem


  



                    
    

  # smf.conf: |     
  #     Identity = "smf.EPC_DOMAIN";
  #     Realm = "EPC_DOMAIN";
  #     ListenOn = "0.0.0.0";
  #     TLS_Cred = "/open5gs/install/etc/freeDiameter/smf.cert.pem", "/open5gs/install/etc/freeDiameter/smf.key.pem";
  #     TLS_CA = "/open5gs/install/etc/freeDiameter/cacert.pem";
  #     NoRelay;
  #     # LoadExtension = "LD_LIBRARY_PATH/freeDiameter/dbg_msg_dumps.fdx" : "0x8888";
  #     # LoadExtension = "LD_LIBRARY_PATH/freeDiameter/dict_mip6i.fdx";
  #     # LoadExtension = "LD_LIBRARY_PATH/freeDiameter/dict_rfc5777.fdx";
  #     # LoadExtension = "LD_LIBRARY_PATH/freeDiameter/dict_nasreq.fdx";
  #     # LoadExtension = "LD_LIBRARY_PATH/freeDiameter/dict_nas_mipv6.fdx";
  #     # LoadExtension = "LD_LIBRARY_PATH/freeDiameter/dict_dcca.fdx";
  #     # LoadExtension = "LD_LIBRARY_PATH/freeDiameter/dict_dcca_3gpp.fdx";
  #     # ConnectPeer = "pcrf.EPC_DOMAIN" { ConnectTo = "PCRF_IP"; Port = PCRF_BIND_PORT; No_TLS; };






  smf_init.sh: |
    #!/bin/bash
    export LC_ALL=C.UTF-8
    export LANG=C.UTF-8
    export IP_ADDR=$(awk 'END{print $1}' /etc/hosts)
    export IF_NAME=$(ip r | awk '/default/ { print $5 }')

    [ ${#MNC} == 3 ] && EPC_DOMAIN="epc.mnc${MNC}.mcc${MCC}.3gppnetwork.org" || EPC_DOMAIN="epc.mnc0${MNC}.mcc${MCC}.3gppnetwork.org"

    UE_IPV4_INTERNET_APN_GATEWAY_IP=$(python3 /mnt/smf/ip_utils.py --ip_range $UE_IPV4_INTERNET)
    UE_IPV4_IMS_TUN_IP=$(python3 /mnt/smf/ip_utils.py --ip_range $UE_IPV4_IMS)

    cp /mnt/smf/smf.conf /open5gs/install/etc/freeDiameter
    cp /mnt/smf/make_certs.sh /open5gs/install/etc/freeDiameter
    cp /mnt/smf/smf.yaml /open5gs/install/etc/open5gs

    # sed -i 's|SMF_IP|'$SMF_IP'|g' install/etc/open5gs/smf.yaml
    # sed -i 's|SCP_IP|'$SCP_IP'|g' install/etc/open5gs/smf.yaml
    # sed -i 's|NRF_IP|'$NRF_IP'|g' install/etc/open5gs/smf.yaml
    # sed -i 's|UPF_IP|'$UPF_IP'|g' install/etc/open5gs/smf.yaml
    sed -i 's|SMF_DNS1|'$SMF_DNS1'|g' /open5gs/install/etc/open5gs/smf.yaml
    sed -i 's|SMF_DNS2|'$SMF_DNS2'|g' /open5gs/install/etc/open5gs/smf.yaml
    sed -i 's|UE_IPV4_INTERNET_APN_GATEWAY_IP|'$UE_IPV4_INTERNET_APN_GATEWAY_IP'|g' /open5gs/install/etc/open5gs/smf.yaml
    sed -i 's|UE_IPV4_INTERNET_APN_SUBNET|'$UE_IPV4_INTERNET'|g' /open5gs/install/etc/open5gs/smf.yaml
    sed -i 's|UE_IPV4_IMS_TUN_IP|'$UE_IPV4_IMS_TUN_IP'|g' /open5gs/install/etc/open5gs/smf.yaml
    sed -i 's|UE_IPV4_IMS_SUBNET|'$UE_IPV4_IMS'|g' /open5gs/install/etc/open5gs/smf.yaml
    sed -i 's|MAX_NUM_UE|'$MAX_NUM_UE'|g' /open5gs/install/etc/open5gs/smf.yaml
    # sed -i 's|SMF_IP|'$SMF_IP'|g' /open5gs/install/etc/freeDiameter/smf.conf
    sed -i 's|PCRF_IP|'$PCRF_IP'|g' /open5gs/install/etc/freeDiameter/smf.conf
    sed -i 's|EPC_DOMAIN|'$EPC_DOMAIN'|g' /open5gs/install/etc/freeDiameter/smf.conf
    sed -i 's|PCRF_BIND_PORT|'$PCRF_BIND_PORT'|g' /open5gs/install/etc/freeDiameter/smf.conf
    sed -i 's|LD_LIBRARY_PATH|'$LD_LIBRARY_PATH'|g' /open5gs/install/etc/freeDiameter/smf.conf
    sed -i 's|EPC_DOMAIN|'$EPC_DOMAIN'|g' /open5gs/install/etc/freeDiameter/make_certs.sh
    # Generate TLS certificates
    chmod +x /open5gs/install/etc/freeDiameter/make_certs.sh
    /open5gs/install/etc/freeDiameter/make_certs.sh /open5gs/install/etc/freeDiameter












